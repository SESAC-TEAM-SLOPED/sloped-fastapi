name: FastAPI CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Convert repository name to lowercase
      run: echo "REPO_LOWER=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      
    - name: Log in to the Container registry
      uses: docker/login-action@v1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.PAT_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: ${{ env.REGISTRY }}/${{ env.REPO_LOWER }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Convert repository name to lowercase
      run: echo "REPO_LOWER=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      
    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        HOST_NAME: ${{ secrets.EC2_HOST }}
        USER_NAME: ${{ secrets.EC2_USER }}
      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOST_NAME} '
          set -e
          echo "Deployment started..."
          
          echo "Changing to /home/opc/docker directory..."
          cd /home/opc/docker
          
          # Login to GitHub Container Registry
          echo "Logging in to GitHub Container Registry..."
          echo ${{ secrets.PAT_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull the latest image
          echo "Pulling the latest image..."
          docker pull ${{ env.REGISTRY }}/${{ env.REPO_LOWER }}:latest
          
          # Update the image in docker-compose.yml
          sed -i "s|image: sloped-fastapi:latest|image: ${{ env.REGISTRY }}/${{ env.REPO_LOWER }}:latest|" docker-compose.yml
          
          # Stop the existing FastAPI container
          echo "Stopping existing FastAPI container..."
          docker-compose stop fastapi-app
          
          # Remove the existing FastAPI container
          echo "Removing existing FastAPI container..."
          docker-compose rm -f fastapi-app
          
          # Start the new FastAPI container
          echo "Starting new FastAPI container..."
          docker-compose up -d fastapi-app
          
          # Verify the FastAPI container is running
          echo "Verifying FastAPI container status..."
          docker-compose ps fastapi-app
          
          # Cleanup
          echo "Cleaning up old images..."
          docker image prune -f
          
          echo "Deployment completed successfully!"
        '
